class t extends HTMLElement{static get observedAttributes(){return["party"]}attributeChangedCallback(t,e,a){this.__initialized&&e!==a&&(this[t]=a)}get party(){return this.hasAttribute("party")}set party(t){this.hasAttribute("party")?this.setAttribute("party",""):this.removeAttribute("party"),this.setParty()}constructor(){super();const e=document.createElement("template");e.innerHTML=t.template(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0)),this.__element=this.shadowRoot.querySelector(".marquee"),this.__initialized=!1,this.__partifier=null}async connectedCallback(){this.style.width=this.style.width?this.style.width:"100%",this.style.fontFamily=this.style.fontFamily?this.style.fontFamily:"Comic Sans MS",this.hasAttribute("party")&&this.setParty(),this.__initialized=!0}setParty(){this.hasAttribute("party")?this.__partifier=setInterval(()=>{const t=Math.floor(255*Math.random()),e=Math.floor(255*Math.random()),a=Math.floor(255*Math.random());this.__element.style.color=`rgb(${t}, ${e}, ${a})`},400):this.__partifier&&(this.__element.style.color="black",clearInterval(this.__partifier))}static template(){return'\n      <style>\n      .marquee {\n        margin: 0 auto;\n        white-space: nowrap;\n        overflow: hidden;\n        box-sizing: border-box;\n      }\n      \n      .marquee span {\n        display: inline-block;\n        padding-left: 100%;\n        animation: marquee 15s linear infinite;\n      }\n      \n      @keyframes marquee {\n        0% {\n          transform: translate(0, 0);\n        }\n        100% {\n          transform: translate(-100%, 0);\n        }\n      }\n      </style>\n      <p class="marquee" style="width: inherit;"><span><slot></slot></span></p>'}}customElements.define("wc-marquee",t);export{t as WCMarquee};
